fragment projectFragment on Project {
	id
	createdAt
	updatedAt
	createdBy
	updatedBy
	projectBasics {
		name
		description
		startDate
		ownerID
		isCapitalized
		owner {
			...userFragment
		}
	}
	projectStatusBlock {
		status
		allowedNextStates {
			nextState
			canEnter
			checkResult	{
				pass
				messages {
					field
					message
				}
		}
      }
	}
	projectValue {
		discountRate
		projectValueLines {
			id
			fundingSource
			valueCategory
			yearOneValue
			yearTwoValue
			yearThreeValue
			yearFourValue
			yearFiveValue
			description
		}
		calculated {
			netPresentValue
			internalRateOfReturn
			yearOneValue
			yearTwoValue
			yearThreeValue
			yearFourValue
			yearFiveValue
			fiveYearGross
		}
	}
	projectCost {
		ongoing
		blendedRate
		calculated {
			initialCost
			hourEstimate
			hoursActualized
		}
	}
	projectDaci {
		driver {
			...resourceFragment
		}
		approver {
			...resourceFragment
		}
		contributor {
			...resourceFragment
		}
		informed {
			...resourceFragment
		}
	}
	projectFeatures {
		id
		name
		description
		priority
		status
	}
	projectMilestones {
		id

		calculated {
			hoursRemaining
			totalHours
			removedHours
			completedTasks
			totalTasks
			isComplete
			isInFlight
		}

		phase {
			name
			description
			id
			order
		}
		tasks {
			id
			name
			description
			status
			hourEstimate
			requiredSkillID
			skills {
				id
				name
			}
			resourceIDs
			resources {
				...resourceFragment
			}

			calculated {
				resourceContention
				actualizedCost
				actualizedHoursToComplete
				commsHourAdjustment
				skillsHourAdjustment
				averageHourlyRate
				exceptions
			}
		}
	}
}

query findProjects($input: PageAndFilter!) {
	findProjects(pageAndFilter: $input) {
		paging {
			...pagingFragment
		}
		results {
			...projectFragment
		}
	}
}

query getProject($id: String!) {
	getProject(id: $id) {
		...projectFragment
	}
}

query checkProjectStatus ($projectID: String!, $newStatus: String!) {
	checkProjectStatus(projectID: $projectID, newStatus: $newStatus) {
		...validationResultFragment
	}
}

query findAllProjectTemplates {
	findAllProjectTemplates {
		results {
			name
			description
			id
			phases {
				id
				name
				order
				description
				tasks {
					name
					description
					requiredSkillID
				}
			}
		}
	}
}

mutation createProject($project: UpdateNewProject!) {
	createProject(input: $project) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation updateProject($project: UpdateProject!) {
	updateProject(input: $project) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation deleteProject($id: String!) {
	deleteProject(id: $id) {
		...statusFragment
	}
}

mutation toggleEmote($input: UpdateCommentEmote!) {
	toggleEmote(input: $input) {
		...statusFragment
	}
}

mutation setProjectMilestonesFromTemplate($input: UpdateProjectMilestoneTemplate!) {
	setProjectMilestonesFromTemplate(input: $input) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation updateProjectTask($input: UpdateProjectMilestoneTask!) {
	updateProjectTask(input: $input) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation deleteProjectTask($projectID: String!, $milestoneID: String!, $taskID: String!) {
	deleteProjectTask(projectID: $projectID, milestoneID: $milestoneID, taskID: $taskID) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation updateProjectFeature($input: UpdateProjectFeature!) {
	updateProjectFeature(input: $input) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation deleteProjectFeature($projectID: String!, $featureID: String!) {
	deleteProjectFeature(projectID: $projectID, featureID: $featureID) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation updateProjectValueLine($input: UpdateProjectValueLine!) {
	updateProjectValueLine(input: $input) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation deleteProjectValueLine($projectID: String!, $valueLineID: String!) {
	deleteProjectValueLine(projectID: $projectID, valueLineID: $valueLineID) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}

mutation setProjectStatus ($projectID: String!, $newStatus: String!) {
	setProjectStatus(projectID: $projectID, newStatus: $newStatus) {
		status {
			...statusFragment
		}
		project {
			...projectFragment
		}
	}
}