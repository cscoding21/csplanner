fragment resourceFragment on Resource {
	name
	id
	user {
		...userFragment	
	}
	roleID
	role {
		...roleFragment
	}
	profileImage
	userEmail
	initialCost
	annualizedCost
	type
	status
	availableHoursPerWeek
	skills {
		...skillFragment
	}
	calculated {
		hourlyCost
		hourlyCostMethod
	}
}

fragment skillFragment on Skill {
	id
	skillID
	name
	proficiency
}

fragment roleFragment on Role {
	id
	name
	description
	hourlyRate
	defaultSkills {
		...skillFragment
	}
}

mutation updateResourceSkill($input: UpdateSkill!) {
	updateResourceSkill(input: $input) {
		success
		message
	}
}

mutation deleteResourceSkill($resourceID: String!, $skillID: String!) {
	deleteResourceSkill(resourceID: $resourceID, skillID: $skillID) {
		success
		message
	}
}

mutation createResource($input: UpdateResource!) {
	createResource(input: $input) {
		status {
			...statusFragment
		}
		resource {
			...resourceFragment
		}
	}
}

mutation updateResource($input: UpdateResource!) {
	updateResource(input: $input) {
		status {
			...statusFragment
		}
		resource {
			...resourceFragment
		}
	}
}

mutation deleteResource($id: String!) {
	deleteResource(id: $id) {
		...statusFragment
	}
}

query getResource($id: String!) {
	getResource(id: $id) {
		meta {
				...baseModelFragment
			}
		data {
			...resourceFragment
		}
	}
}

query findAllResources {
	findAllResources {
		paging {
			...pagingFragment
		}
		results {
			meta {
				...baseModelFragment
			}
			data {
				...resourceFragment
			}
		}
	}
}

query findResources($input: PageAndFilter!) {
	findResources(pageAndFilter: $input) {
		paging {
			...pagingFragment
		}
		results {
			meta {
				...baseModelFragment
			}
			data {
				...resourceFragment
			}
		}
	}
}


query findAllRoles {
	findAllRoles {
		paging {
			...pagingFragment
		}
		results {
			meta {
				...baseModelFragment
			}
			data {
				...roleFragment
			}
		}
	}
}

mutation updateRole($input: UpdateRole!) {
	updateRole(input: $input) {
		status {
			...statusFragment
		}
		role {
			...roleFragment
		}
	}
}

mutation updateAllRoles($input: [UpdateRole]!) {
	updateAllRoles(input: $input) {
		status {
			...statusFragment
		}
	}
}

mutation deleteRrole($id: String!) {
	deleteRole(id: $id) {
		...statusFragment
	}
}