// Code generated . DO NOT EDIT.
// ################################## DO NOT EDIT THIS FILE ######################################
// Common Sense Coding (https://github.com/cscoding21/csgen)

// Generate Date: 2024-06-25 12:51:26.332557964 -0700 PDT m=+0.134690557
// Implementation Name: csplanner

// -----------------------------------------------------------------------------------------------

package auth

import (
	"context"
	"csserver/internal/common"
	"csserver/internal/interfaces"
	"csserver/internal/marshal"
	"csserver/internal/providers/surreal"
)

// ---This is the name of the object in the database
const AuthIdentifier = "auth"

// AuthService is a service for interacting with lists.
type AuthService struct {
	DBClient      surreal.DBClient
	ContextHelper interfaces.ContextHelpers
}

// NewAuthService creates a new Auth service.
func NewAuthService(
	db surreal.DBClient) *AuthService {

	return &AuthService{
		DBClient: db,
	}
}

// GetAuthByID gets a Auth by its ID.
func (s *AuthService) GetAuthByID(ctx context.Context, id string) (*Auth, error) {
	outData, err := s.DBClient.GetObjectById(id)
	if err != nil {
		return common.HandleReturnWithValue[Auth](nil, err)
	}

	output, err := marshal.SurrealUnmarshal[Auth](outData)

	return common.HandleReturnWithValue(
		output,
		err,
	)
}

// FindAllAuth return all Auth in the system
func (s *AuthService) FindAllAuth(ctx context.Context) (common.PagedResults[Auth], error) {
	pagingResults := common.NewPagedResultsForAllRecords[Auth]()
	sql := "select * from auth where deleted_at is null order by name"

	results, resultCount, err := s.DBClient.FindPagedObjects(sql, pagingResults.Pagination, pagingResults.Filters)
	if err != nil {
		return pagingResults, err
	}

	pagingResults.Pagination.TotalResults = &resultCount
	unpacked, err := marshal.SurrealSmartUnmarshal[[]Auth](results)
	if err != nil {
		return pagingResults, err
	}

	pagingResults.Results = common.RefToVal(unpacked)
	return pagingResults, nil
}

// AuthList creates a new Auth.
func (s *AuthService) CreateAuth(ctx context.Context, input *Auth) (*Auth, error) {

	userID := s.ContextHelper.GetUserIDFromContext(ctx)

	outData, err := s.DBClient.CreateObject(userID, AuthIdentifier, input)
	if err != nil {
		return common.HandleReturnWithValue[Auth](nil, err)
	}

	list, err := marshal.SurrealSmartUnmarshal[Auth](outData)

	return common.HandleReturnWithValue(list, err)
}

// UpdateAuth update an existing Auth.
func (s *AuthService) UpdateAuth(ctx context.Context, input *Auth) (*Auth, error) {

	userID := s.ContextHelper.GetUserIDFromContext(ctx)

	outData, err := s.DBClient.UpdateObject(userID, input.ID, input)
	if err != nil {
		return common.HandleReturnWithValue[Auth](nil, err)
	}

	output, err := marshal.SurrealUnmarshal[Auth](outData)

	return common.HandleReturnWithValue(output, err)
}

// DeleteAuth deletes a Auth.
func (s *AuthService) DeleteAuth(ctx context.Context, id string) error {
	userID := s.ContextHelper.GetUserIDFromContext(ctx)

	list, err := s.GetAuthByID(ctx, id)
	if err != nil {
		return common.HandleReturn(err)
	}

	return common.HandleReturn(
		s.DBClient.SoftDeleteObject(userID, list),
	)
}
