package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"csserver/internal/appserv/csmap"
	"csserver/internal/appserv/factory"
	"csserver/internal/appserv/graph"
	"csserver/internal/appserv/graph/idl"
	"csserver/internal/common"
	"csserver/internal/services/comment"
	"csserver/internal/services/project"
	"csserver/internal/services/project/ptypes/projectstatus"
	"csserver/internal/services/resource"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input idl.UpdateUser) (*idl.CreateUserResult, error) {
	out := idl.CreateUserResult{}
	service := factory.GetIAMAdminService()
	user := csmap.UpdateUserIdlToUser(input)

	result, err := service.CreateUser(ctx, &user)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
	} else {
		out.Status, _ = csmap.GetStatusFromUpdateResult(result)
		out.User = common.ValToRef(csmap.UserUserToIdl(*result.Object))
	}

	return &out, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input idl.UpdateUser) (*idl.CreateUserResult, error) {
	out := idl.CreateUserResult{}
	service := factory.GetIAMAdminService()
	user := csmap.UpdateUserIdlToUser(input)

	result, err := service.UpdateUser(ctx, &user)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
	} else {
		out.Status, _ = csmap.GetStatusFromUpdateResult(result)
		out.User = common.ValToRef(csmap.UserUserToIdl(*result.Object))
	}

	return &out, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input idl.UpdateProject) (*idl.CreateProjectResult, error) {
	//---create vs update is handled at the service level
	return r.UpdateProject(ctx, input)
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input idl.UpdateProject) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()
	org, _ := factory.GetDefaultOrganization(ctx)

	proj := csmap.UpdateProjectIdlToProject(input)

	result, err := service.SaveProject(ctx, proj, *org)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*result.Object)),
	}

	return &out, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (*idl.Status, error) {
	service := factory.GetProjectService()
	return csmap.GetStatusFromError(service.DeleteProject(ctx, id))
}

// UpdateProjectTask is the resolver for the updateProjectTask field.
func (r *mutationResolver) UpdateProjectTask(ctx context.Context, input idl.UpdateProjectMilestoneTask) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()
	org, _ := factory.GetDefaultOrganization(ctx)

	task := csmap.UpdateProjectMilestoneTaskIdlToProject(input)

	result, err := service.UpdateProjectTask(ctx, input.ProjectID, input.MilestoneID, task, *org)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*result.Object)),
	}

	return &out, nil
}

// DeleteProjectTask is the resolver for the deleteProjectTask field.
func (r *mutationResolver) DeleteProjectTask(ctx context.Context, projectID string, milestoneID string, taskID string) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()

	result, err := service.DeleteTaskFromProject(ctx, projectID, milestoneID, taskID)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*result.Object)),
	}

	return &out, nil
}

// UpdateProjectFeature is the resolver for the updateProjectFeature field.
func (r *mutationResolver) UpdateProjectFeature(ctx context.Context, input idl.UpdateProjectFeature) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()

	feature := csmap.UpdateProjectFeatureIdlToProject(input)

	result, err := service.UpdateProjectFeature(ctx, input.ProjectID, feature)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*result.Object)),
	}

	return &out, nil
}

// DeleteProjectFeature is the resolver for the deleteProjectFeature field.
func (r *mutationResolver) DeleteProjectFeature(ctx context.Context, projectID string, featureID string) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()

	result, err := service.DeleteFeatureFromProject(ctx, projectID, featureID)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*result.Object)),
	}

	return &out, nil
}

// UpdateProjectValueLine is the resolver for the updateProjectValueLine field.
func (r *mutationResolver) UpdateProjectValueLine(ctx context.Context, input idl.UpdateProjectValueLine) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()

	vl := csmap.UpdateProjectValueLineIdlToProject(input)

	result, err := service.UpdateProjectValueLine(ctx, input.ProjectID, vl)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*result.Object)),
	}

	return &out, nil
}

// DeleteProjectValueLine is the resolver for the deleteProjectValueLine field.
func (r *mutationResolver) DeleteProjectValueLine(ctx context.Context, projectID string, valueLineID string) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()

	result, err := service.DeleteValueLineProject(ctx, projectID, valueLineID)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*result.Object)),
	}

	return &out, nil
}

// SetProjectStatus is the resolver for the setProjectStatus field.
func (r *mutationResolver) SetProjectStatus(ctx context.Context, projectID string, newStatus string) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()

	result, err := service.SetProjectStatus(ctx, projectID, projectstatus.ProjectState(newStatus), false)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*result.Object)),
	}

	return &out, nil
}

// CreateProjectComment is the resolver for the createProjectComment field.
func (r *mutationResolver) CreateProjectComment(ctx context.Context, input idl.UpdateComment) (*idl.CreateProjectCommentResult, error) {
	service := factory.GetCommentService()

	comment := comment.Comment{
		ProjectID: input.ProjectID,
		Text:      input.Text,
	}

	result, err := service.AddComment(ctx, comment)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectCommentResult{
		Status:  status,
		Comment: common.ValToRef(csmap.CommentCommentToIdl(*result.Object)),
	}

	return &out, nil
}

// CreateProjectCommentReply is the resolver for the createProjectCommentReply field.
func (r *mutationResolver) CreateProjectCommentReply(ctx context.Context, input idl.UpdateCommentReply) (*idl.CreateProjectCommentResult, error) {
	service := factory.GetCommentService()

	comment := comment.Comment{
		Text: input.Text,
	}

	result, err := service.AddCommentReply(ctx, comment, input.ParentCommentID)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectCommentResult{
		Status:  status,
		Comment: common.ValToRef(csmap.CommentCommentToIdl(*result.Object)),
	}

	return &out, nil
}

// DeleteProjectComment is the resolver for the deleteProjectComment field.
func (r *mutationResolver) DeleteProjectComment(ctx context.Context, id string) (*idl.Status, error) {
	service := factory.GetCommentService()

	return csmap.GetStatusFromError(service.DeleteComment(ctx, id))
}

// UpdateProjectComment is the resolver for the updateProjectComment field.
func (r *mutationResolver) UpdateProjectComment(ctx context.Context, input idl.UpdateComment) (*idl.CreateProjectCommentResult, error) {
	service := factory.GetCommentService()

	comment := csmap.UpdateCommentIdlToComment(input)

	result, err := service.ModifyComment(ctx, comment)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(*result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectCommentResult{
		Status:  status,
		Comment: common.ValToRef(csmap.CommentCommentToIdl(*result.Object)),
	}

	return &out, nil
}

// ToggleEmote is the resolver for the toggleEmote field.
func (r *mutationResolver) ToggleEmote(ctx context.Context, input idl.UpdateCommentEmote) (*idl.Status, error) {
	service := factory.GetCommentService()

	return csmap.GetStatusFromError(service.ToggleCommentEmote(ctx, input.CommentID, comment.CommentEmoteType(input.EmoteType)))
}

// CreateResource is the resolver for the createResource field.
func (r *mutationResolver) CreateResource(ctx context.Context, input idl.UpdateResource) (*idl.CreateResourceResult, error) {
	out := idl.CreateResourceResult{}
	service := factory.GetResourceService()
	res := csmap.UpdateResourceIdlToResource(input)

	result, err := service.CreateResource(ctx, &res)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
	} else {
		out.Status, _ = csmap.GetStatusFromUpdateResult(result)
		out.Resource = common.ValToRef(csmap.ResourceResourceToIdl(*result.Object))
	}

	return &out, err
}

// UpdateResource is the resolver for the updateResource field.
func (r *mutationResolver) UpdateResource(ctx context.Context, input idl.UpdateResource) (*idl.CreateResourceResult, error) {
	out := idl.CreateResourceResult{}
	service := factory.GetResourceService()
	res := csmap.UpdateResourceIdlToResource(input)
	var result common.UpdateResult[resource.Resource]
	var err error

	if len(res.ID) > 0 {
		result, err = service.PatchResource(ctx, res)
	} else {
		result, err = service.CreateResource(ctx, &res)
	}
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
	} else {
		out.Status, _ = csmap.GetStatusFromUpdateResult(result)
		out.Resource = common.ValToRef(csmap.ResourceResourceToIdl(*result.Object))
	}

	return &out, err
}

// DeleteResource is the resolver for the deleteResource field.
func (r *mutationResolver) DeleteResource(ctx context.Context, id string) (*idl.Status, error) {
	service := factory.GetResourceService()

	return csmap.GetStatusFromError(service.DeleteResource(ctx, id))
}

// UpdateResourceSkill is the resolver for the updateResourceSkill field.
func (r *mutationResolver) UpdateResourceSkill(ctx context.Context, input idl.UpdateSkill) (*idl.Status, error) {
	service := factory.GetResourceService()
	skill := csmap.UpdateSkillIdlToResource(input)

	_, err := service.UpdateSkillForResource(ctx, input.ResourceID, skill)
	if err != nil {
		return csmap.GetStatusFromError(err)
	}

	return &idl.Status{Success: true}, nil
}

// DeleteResourceSkill is the resolver for the deleteResourceSkill field.
func (r *mutationResolver) DeleteResourceSkill(ctx context.Context, resourceID string, skillID string) (*idl.Status, error) {
	service := factory.GetResourceService()
	_, err := service.RemoveSkillFromResource(ctx, resourceID, skillID)

	return csmap.GetStatusFromError(err)
}

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input idl.UpdateOrganization) (*idl.CreateOrganizationResult, error) {
	panic(fmt.Errorf("not implemented: CreateOrganization - createOrganization"))
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, input idl.UpdateOrganization) (*idl.CreateOrganizationResult, error) {
	panic(fmt.Errorf("not implemented: UpdateOrganization - updateOrganization"))
}

// SetProjectMilestonesFromTemplate is the resolver for the setProjectMilestonesFromTemplate field.
func (r *mutationResolver) SetProjectMilestonesFromTemplate(ctx context.Context, input *idl.UpdateProjectMilestoneTemplate) (*idl.CreateProjectResult, error) {
	service := factory.GetProjectService()
	templateService := factory.GetProjectTemplateService()

	//---get the selected template
	template, err := templateService.GetProjecttemplateByID(ctx, input.TemplateID)
	if err != nil {
		return nil, err
	}

	//---update the project with the template structure
	resp, err := service.SetProjectMilestonesFromTemplate(ctx, input.ProjectID, *template)
	if err != nil {
		return nil, err
	}

	//---map back the result
	status, err := csmap.GetStatusFromUpdateResult[project.Project](*resp)
	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*resp.Object)),
	}

	return &out, nil
}

// SetNotificationsRead is the resolver for the setNotificationsRead field.
func (r *mutationResolver) SetNotificationsRead(ctx context.Context, input []string) (*idl.Status, error) {
	service := factory.GetNotificationService()

	err := service.SetNotificationsRead(ctx, input)
	if err != nil {
		return csmap.GetStatusFromError(err)
	}

	return &idl.Status{Success: true}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
