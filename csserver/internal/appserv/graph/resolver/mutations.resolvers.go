package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"csserver/internal/appserv/factory"
	"csserver/internal/appserv/graph"
	"csserver/internal/appserv/graph/idl"
	"csserver/internal/services/iam/auth"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input idl.UpdateUser) (*idl.CreateUserResult, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input idl.UpdateUser) (*idl.CreateUserResult, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, creds idl.UpdateLogin) (*idl.LoginResult, error) {
	ae := factory.GetAuthService(ctx)
	cr := auth.AuthCredentials{
		Username: creds.Email,
		Password: creds.Password,
	}

	resp, err := ae.Authenticate(ctx, cr)
	if err != nil {
		return nil, err
	}

	status := idl.Status{
		Success: resp.Success,
		Message: []string{resp.Message},
	}
	user := idl.User{
		FirstName: resp.User.FirstName,
		LastName:  resp.User.LastName,
		Email:     resp.User.Email,
	}

	lr := idl.LoginResult{
		Token:  &resp.Token,
		Status: &status,
		User:   &user,
	}

	return &lr, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input idl.UpdateProject) (*idl.CreateProjectResult, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input idl.UpdateProject) (*idl.CreateProjectResult, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (*idl.Status, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// UpdateProjectTask is the resolver for the updateProjectTask field.
func (r *mutationResolver) UpdateProjectTask(ctx context.Context, input idl.UpdateProjectMilestoneTask) (*idl.CreateProjectResult, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectTask - updateProjectTask"))
}

// DeleteProjectTask is the resolver for the deleteProjectTask field.
func (r *mutationResolver) DeleteProjectTask(ctx context.Context, projectID string, milestoneID string, taskID string) (*idl.CreateProjectResult, error) {
	panic(fmt.Errorf("not implemented: DeleteProjectTask - deleteProjectTask"))
}

// UpdateProjectFeature is the resolver for the updateProjectFeature field.
func (r *mutationResolver) UpdateProjectFeature(ctx context.Context, input idl.UpdateProjectFeature) (*idl.CreateProjectResult, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectFeature - updateProjectFeature"))
}

// DeleteProjectFeature is the resolver for the deleteProjectFeature field.
func (r *mutationResolver) DeleteProjectFeature(ctx context.Context, projectID string, featureID string) (*idl.CreateProjectResult, error) {
	panic(fmt.Errorf("not implemented: DeleteProjectFeature - deleteProjectFeature"))
}

// CreateProjectComment is the resolver for the createProjectComment field.
func (r *mutationResolver) CreateProjectComment(ctx context.Context, input idl.UpdateComment) (*idl.CreateProjectCommentResult, error) {
	panic(fmt.Errorf("not implemented: CreateProjectComment - createProjectComment"))
}

// CreateProjectCommentReply is the resolver for the createProjectCommentReply field.
func (r *mutationResolver) CreateProjectCommentReply(ctx context.Context, input idl.UpdateCommentReply) (*idl.CreateProjectCommentResult, error) {
	panic(fmt.Errorf("not implemented: CreateProjectCommentReply - createProjectCommentReply"))
}

// DeleteProjectComment is the resolver for the deleteProjectComment field.
func (r *mutationResolver) DeleteProjectComment(ctx context.Context, id string) (*idl.Status, error) {
	panic(fmt.Errorf("not implemented: DeleteProjectComment - deleteProjectComment"))
}

// UpdateProjectComment is the resolver for the updateProjectComment field.
func (r *mutationResolver) UpdateProjectComment(ctx context.Context, input idl.UpdateComment) (*idl.CreateProjectCommentResult, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectComment - updateProjectComment"))
}

// ToggleEmote is the resolver for the toggleEmote field.
func (r *mutationResolver) ToggleEmote(ctx context.Context, input idl.UpdateCommentEmote) (*idl.Status, error) {
	panic(fmt.Errorf("not implemented: ToggleEmote - toggleEmote"))
}

// CreateResource is the resolver for the createResource field.
func (r *mutationResolver) CreateResource(ctx context.Context, input idl.UpdateResource) (*idl.CreateResourceResult, error) {
	panic(fmt.Errorf("not implemented: CreateResource - createResource"))
}

// UpdateResource is the resolver for the updateResource field.
func (r *mutationResolver) UpdateResource(ctx context.Context, input idl.UpdateResource) (*idl.CreateResourceResult, error) {
	panic(fmt.Errorf("not implemented: UpdateResource - updateResource"))
}

// DeleteResource is the resolver for the deleteResource field.
func (r *mutationResolver) DeleteResource(ctx context.Context, id string) (*idl.Status, error) {
	panic(fmt.Errorf("not implemented: DeleteResource - deleteResource"))
}

// UpdateResourceSkill is the resolver for the updateResourceSkill field.
func (r *mutationResolver) UpdateResourceSkill(ctx context.Context, input idl.UpdateSkill) (*idl.Status, error) {
	panic(fmt.Errorf("not implemented: UpdateResourceSkill - updateResourceSkill"))
}

// DeleteResourceSkill is the resolver for the deleteResourceSkill field.
func (r *mutationResolver) DeleteResourceSkill(ctx context.Context, resourceID string, skillID string) (*idl.Status, error) {
	panic(fmt.Errorf("not implemented: DeleteResourceSkill - deleteResourceSkill"))
}

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input idl.UpdateOrganization) (*idl.CreateOrganizationResult, error) {
	panic(fmt.Errorf("not implemented: CreateOrganization - createOrganization"))
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, input idl.UpdateOrganization) (*idl.CreateOrganizationResult, error) {
	panic(fmt.Errorf("not implemented: UpdateOrganization - updateOrganization"))
}

// SetProjectMilestonesFromTemplate is the resolver for the setProjectMilestonesFromTemplate field.
func (r *mutationResolver) SetProjectMilestonesFromTemplate(ctx context.Context, input *idl.UpdateProjectMilestoneTemplate) (*idl.Project, error) {
	panic(fmt.Errorf("not implemented: SetProjectMilestonesFromTemplate - setProjectMilestonesFromTemplate"))
}

// SetNotificationsRead is the resolver for the setNotificationsRead field.
func (r *mutationResolver) SetNotificationsRead(ctx context.Context, input []string) (*idl.Status, error) {
	panic(fmt.Errorf("not implemented: SetNotificationsRead - setNotificationsRead"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
