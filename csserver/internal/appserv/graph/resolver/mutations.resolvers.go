package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"csserver/internal/appserv/csmap"
	"csserver/internal/appserv/factory"
	"csserver/internal/appserv/graph"
	"csserver/internal/appserv/graph/idl"
	"csserver/internal/appserv/orgmap"
	"csserver/internal/common"
	"csserver/internal/services/comment"
	"csserver/internal/services/project"
	"csserver/internal/services/project/ptypes/milestonestatus"
	"csserver/internal/services/project/ptypes/projectstatus"
	"csserver/internal/services/resource"
	"csserver/internal/utils"
)

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input idl.UpdateUser) (*idl.CreateUserResult, error) {
	out := idl.CreateUserResult{}
	service := factory.GetIAMAdminService(ctx)
	user := csmap.UpdateUserIdlToAppuser(input)
	orgInfo, err := orgmap.GetSaaSOrg(ctx)
	if err != nil {
		return nil, err
	}

	result, err := service.UpdateUser(ctx, orgInfo.Info.Org.Realm, user)
	wrapperU := result.Object
	u := *wrapperU
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
	} else {
		out.Status, _ = csmap.GetStatusFromUpdateResult(result)
		out.User = common.ValToRef(csmap.AppuserAppuserToIdl(u.Data))
	}

	return &out, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input idl.UpdateNewProject) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	rs := factory.GetResourceService(ctx)
	ts := factory.GetProjectTemplateService(ctx)
	org, _ := factory.GetDefaultOrganization(ctx)

	resourceMap, err := rs.GetResourceMap(ctx, false)
	if err != nil {
		return nil, err
	}

	roleMap, err := rs.GetRoleMap(ctx, false)
	if err != nil {
		return nil, err
	}

	basics := project.ProjectBasics{
		Name:          input.Name,
		Description:   input.Description,
		OwnerID:       input.OwnerID,
		IsCapitalized: input.IsCapitalized,
	}

	template, err := ts.GetProjecttemplateByID(ctx, input.TemplateID)
	if err != nil {
		return nil, err
	}

	result, err := service.CreateNewProject(ctx, basics, template.Data, resourceMap, roleMap, *org)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input idl.UpdateProject) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	rs := factory.GetResourceService(ctx)
	org, _ := factory.GetDefaultOrganization(ctx)

	proj := csmap.UpdateProjectIdlToProject(input)

	resourceMap, err := rs.GetResourceMap(ctx, false)
	if err != nil {
		return nil, err
	}

	roleMap, err := rs.GetRoleMap(ctx, false)
	if err != nil {
		return nil, err
	}

	result, err := service.SaveProject(ctx, proj, resourceMap, roleMap, *org)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (*idl.Status, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	return csmap.GetStatusFromError(service.DeleteProject(ctx, id))
}

// UpdateProjectTask is the resolver for the updateProjectTask field.
func (r *mutationResolver) UpdateProjectTask(ctx context.Context, input idl.UpdateProjectMilestoneTask) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	rs := factory.GetResourceService(ctx)
	org, _ := factory.GetDefaultOrganization(ctx)

	resourceMap, err := rs.GetResourceMap(ctx, false)
	if err != nil {
		return nil, err
	}

	roleMap, err := rs.GetRoleMap(ctx, false)
	if err != nil {
		return nil, err
	}

	task := csmap.UpdateProjectMilestoneTaskIdlToProject(input)

	result, err := service.UpdateProjectTask(ctx, input.ProjectID, input.MilestoneID, task, resourceMap, roleMap, *org)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// DeleteProjectTask is the resolver for the deleteProjectTask field.
func (r *mutationResolver) DeleteProjectTask(ctx context.Context, projectID string, milestoneID string, taskID string) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	rs := factory.GetResourceService(ctx)
	org, _ := factory.GetDefaultOrganization(ctx)

	resourceMap, err := rs.GetResourceMap(ctx, false)
	if err != nil {
		return nil, err
	}

	roleMap, err := rs.GetRoleMap(ctx, false)
	if err != nil {
		return nil, err
	}

	result, err := service.DeleteTaskFromProject(ctx, projectID, milestoneID, taskID, resourceMap, roleMap, *org)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// UpdateProjectTaskStatus is the resolver for the updateProjectTaskStatus field.
func (r *mutationResolver) UpdateProjectTaskStatus(ctx context.Context, projectID string, milestoneID string, taskID string, status string) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	rs := factory.GetResourceService(ctx)
	org, _ := factory.GetDefaultOrganization(ctx)

	resourceMap, err := rs.GetResourceMap(ctx, false)
	if err != nil {
		return nil, err
	}

	roleMap, err := rs.GetRoleMap(ctx, false)
	if err != nil {
		return nil, err
	}

	result, err := service.UpdateProjectTaskStatus(ctx, projectID, milestoneID, taskID, milestonestatus.MilestoneStatus(status), resourceMap, roleMap, *org)
	if err != nil {
		return nil, err
	}

	updateStatus, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  updateStatus,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// UpdateProjectFeature is the resolver for the updateProjectFeature field.
func (r *mutationResolver) UpdateProjectFeature(ctx context.Context, input idl.UpdateProjectFeature) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	rs := factory.GetResourceService(ctx)
	org, _ := factory.GetDefaultOrganization(ctx)

	resourceMap, err := rs.GetResourceMap(ctx, false)
	if err != nil {
		return nil, err
	}

	roleMap, err := rs.GetRoleMap(ctx, false)
	if err != nil {
		return nil, err
	}

	feature := csmap.UpdateProjectFeatureIdlToProject(input)

	result, err := service.UpdateProjectFeature(ctx, input.ProjectID, feature, resourceMap, roleMap, *org)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// DeleteProjectFeature is the resolver for the deleteProjectFeature field.
func (r *mutationResolver) DeleteProjectFeature(ctx context.Context, projectID string, featureID string) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	rs := factory.GetResourceService(ctx)
	org, _ := factory.GetDefaultOrganization(ctx)

	resourceMap, err := rs.GetResourceMap(ctx, false)
	if err != nil {
		return nil, err
	}

	roleMap, err := rs.GetRoleMap(ctx, false)
	if err != nil {
		return nil, err
	}

	result, err := service.DeleteFeatureFromProject(ctx, projectID, featureID, resourceMap, roleMap, *org)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// UpdateProjectValueLine is the resolver for the updateProjectValueLine field.
func (r *mutationResolver) UpdateProjectValueLine(ctx context.Context, input idl.UpdateProjectValueLine) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)

	vl := csmap.UpdateProjectValueLineIdlToProject(input)

	result, err := service.UpdateProjectValueLine(ctx, input.ProjectID, vl)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// DeleteProjectValueLine is the resolver for the deleteProjectValueLine field.
func (r *mutationResolver) DeleteProjectValueLine(ctx context.Context, projectID string, valueLineID string) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)

	result, err := service.DeleteValueLineProject(ctx, projectID, valueLineID)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// SetProjectStatus is the resolver for the setProjectStatus field.
func (r *mutationResolver) SetProjectStatus(ctx context.Context, projectID string, newStatus string) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)

	result, err := service.SetProjectStatus(ctx, projectID, projectstatus.ProjectState(newStatus), false)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// RunProcesses is the resolver for the runProcesses field.
func (r *mutationResolver) RunProcesses(ctx context.Context) (*idl.Status, error) {
	service := factory.GetProcessorService(ctx)

	err := service.ProcessNightly(ctx)

	return csmap.GetStatusFromError(err)
}

// CreateProjectComment is the resolver for the createProjectComment field.
func (r *mutationResolver) CreateProjectComment(ctx context.Context, input idl.UpdateComment) (*idl.CreateProjectCommentResult, error) {
	service := factory.GetCommentService(ctx)

	comment := comment.Comment{
		ProjectID: input.ProjectID,
		Text:      input.Text,
	}

	result, err := service.UpdateComment(ctx, comment)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	co := *result.Object
	out := idl.CreateProjectCommentResult{
		Status:  status,
		Comment: common.ValToRef(csmap.CommentCommentToIdl(co.Data)),
	}

	return &out, nil
}

// CreateProjectCommentReply is the resolver for the createProjectCommentReply field.
func (r *mutationResolver) CreateProjectCommentReply(ctx context.Context, input idl.UpdateCommentReply) (*idl.CreateProjectCommentResult, error) {
	service := factory.GetCommentService(ctx)

	comment := comment.Comment{
		Text: input.Text,
	}

	result, err := service.AddCommentReply(ctx, comment, input.ParentCommentID)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	co := *result.Object
	out := idl.CreateProjectCommentResult{
		Status:  status,
		Comment: common.ValToRef(csmap.CommentCommentToIdl(co.Data)),
	}

	return &out, nil
}

// DeleteProjectComment is the resolver for the deleteProjectComment field.
func (r *mutationResolver) DeleteProjectComment(ctx context.Context, id string) (*idl.Status, error) {
	service := factory.GetCommentService(ctx)

	return csmap.GetStatusFromError(service.DeleteComment(ctx, id))
}

// UpdateProjectComment is the resolver for the updateProjectComment field.
func (r *mutationResolver) UpdateProjectComment(ctx context.Context, input idl.UpdateComment) (*idl.CreateProjectCommentResult, error) {
	service := factory.GetCommentService(ctx)

	comment := csmap.UpdateCommentIdlToComment(input)

	result, err := service.ModifyComment(ctx, comment)
	if err != nil {
		return nil, err
	}

	status, err := csmap.GetStatusFromUpdateResult(result)
	if err != nil {
		return nil, err
	}

	c := *result.Object
	out := idl.CreateProjectCommentResult{
		Status:  status,
		Comment: common.ValToRef(csmap.CommentCommentToIdl(c.Data)),
	}

	return &out, nil
}

// ToggleEmote is the resolver for the toggleEmote field.
func (r *mutationResolver) ToggleEmote(ctx context.Context, input idl.UpdateCommentEmote) (*idl.Status, error) {
	service := factory.GetCommentService(ctx)

	return csmap.GetStatusFromError(service.ToggleCommentReaction(ctx, input.ProjectID, input.CommentID, comment.CommentReactionType(input.EmoteType)))
}

// CreateResource is the resolver for the createResource field.
func (r *mutationResolver) CreateResource(ctx context.Context, input idl.UpdateResource) (*idl.CreateResourceResult, error) {
	defer csmap.ExpireResourceCache()

	out := idl.CreateResourceResult{}
	service := factory.GetResourceService(ctx)
	org, err := factory.GetDefaultOrganization(ctx)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
		return &out, err
	}
	res := csmap.UpdateResourceIdlToResource(input)

	result, err := service.SaveResource(ctx, res, *org)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
	} else {
		out.Status, _ = csmap.GetStatusFromUpdateResult(result)
		out.Resource = common.ValToRef(csmap.ResourceResourceToIdl(*common.UpwrapFromUpdateResult(result)))
	}

	return &out, err
}

// UpdateResource is the resolver for the updateResource field.
func (r *mutationResolver) UpdateResource(ctx context.Context, input idl.UpdateResource) (*idl.CreateResourceResult, error) {
	defer csmap.ExpireResourceCache()

	out := idl.CreateResourceResult{}
	service := factory.GetResourceService(ctx)
	res := csmap.UpdateResourceIdlToResource(input)
	var result common.UpdateResult[*common.BaseModel[resource.Resource]]
	var err error

	org, err := factory.GetDefaultOrganization(ctx)
	if err != nil {
		return nil, err
	}

	result, err = service.SaveResource(ctx, res, *org)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
	} else {
		out.Status, _ = csmap.GetStatusFromUpdateResult(result)
		out.Resource = common.ValToRef(csmap.ResourceResourceToIdl(*common.UpwrapFromUpdateResult(result)))
	}

	return &out, err
}

// DeleteResource is the resolver for the deleteResource field.
func (r *mutationResolver) DeleteResource(ctx context.Context, id string) (*idl.Status, error) {
	defer csmap.ExpireResourceCache()

	service := factory.GetResourceService(ctx)

	return csmap.GetStatusFromError(service.DeleteResource(ctx, id))
}

// UpdateResourceSkill is the resolver for the updateResourceSkill field.
func (r *mutationResolver) UpdateResourceSkill(ctx context.Context, input idl.UpdateSkill) (*idl.Status, error) {
	defer csmap.ExpireResourceCache()

	service := factory.GetResourceService(ctx)
	skill := csmap.UpdateSkillIdlToResource(input)

	_, err := service.UpdateSkillForResource(ctx, input.ParentID, skill)
	if err != nil {
		return csmap.GetStatusFromError(err)
	}

	return &idl.Status{Success: true}, nil
}

// DeleteResourceSkill is the resolver for the deleteResourceSkill field.
func (r *mutationResolver) DeleteResourceSkill(ctx context.Context, resourceID string, skillID string) (*idl.Status, error) {
	defer csmap.ExpireResourceCache()

	service := factory.GetResourceService(ctx)
	_, err := service.RemoveSkillFromResource(ctx, resourceID, skillID)

	return csmap.GetStatusFromError(err)
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, input idl.UpdateRole) (*idl.CreateRoleResult, error) {
	defer csmap.ExpireRoleCache()

	service := factory.GetResourceService(ctx)
	out := idl.CreateRoleResult{}

	role := csmap.UpdateRoleIdlToResource(input)
	result, err := service.UpsertRole(ctx, role)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
		return &out, err
	}

	out.Status, _ = csmap.GetStatusFromUpdateResult(result)
	out.Role = common.ValToRef(csmap.RoleResourceToIdl(*common.UpwrapFromUpdateResult(result)))

	return &out, nil
}

// UpdateAllRoles is the resolver for the updateAllRoles field.
func (r *mutationResolver) UpdateAllRoles(ctx context.Context, input []*idl.UpdateRole) (*idl.CreateRoleResult, error) {
	defer csmap.ExpireRoleCache()

	service := factory.GetResourceService(ctx)
	out := idl.CreateRoleResult{}

	roles := csmap.UpdateRoleIdlToResourceSlice(input)
	result, err := service.UpdateAllRoles(ctx, roles)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
		return &out, err
	}

	out.Status, _ = csmap.GetStatusFromUpdateResult(result)

	return &out, nil
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (*idl.Status, error) {
	defer csmap.ExpireRoleCache()

	service := factory.GetResourceService(ctx)

	err := service.DeleteRole(ctx, id)
	return csmap.GetStatusFromError(err)
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, input idl.UpdateOrganization) (*idl.CreateOrganizationResult, error) {
	service := factory.GetOrganizationService(ctx)

	model := csmap.UpdateOrganizationIdlToOrganization(input)

	result, err := service.SaveOrgDefaults(ctx, model.Defaults)
	if err != nil {
		return nil, err
	}

	//---map back the result
	status, _ := csmap.GetStatusFromUpdateResult(result)
	out := idl.CreateOrganizationResult{
		Status:       status,
		Organization: common.ValToRef(csmap.OrganizationOrganizationToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	csmap.AugmentOrganization(ctx, out.Organization)

	return &out, nil
}

// UpdateList is the resolver for the updateList field.
func (r *mutationResolver) UpdateList(ctx context.Context, input idl.UpdateList) (*idl.CreateListResult, error) {
	defer csmap.ExpireListCache()
	defer csmap.ExpireRoleCache()
	defer csmap.ExpireResourceCache()

	service := factory.GetListService(ctx)
	out := idl.CreateListResult{}

	model := csmap.UpdateListIdlToList(input)

	result, err := service.SaveList(ctx, model)
	if err != nil {
		return nil, err
	}

	out.Status, _ = csmap.GetStatusFromUpdateResult(result)
	out.List = utils.ValToRef(csmap.ListListToIdl(*common.UpwrapFromUpdateResult(result)))

	return &out, nil
}

// UpdateProjectTemplate is the resolver for the updateProjectTemplate field.
func (r *mutationResolver) UpdateProjectTemplate(ctx context.Context, input *idl.UpdateProjecttemplate) (*idl.CreateProjectTemplateResult, error) {
	service := factory.GetProjectTemplateService(ctx)
	out := idl.CreateProjectTemplateResult{}

	model := csmap.UpdateProjecttemplateIdlToProjecttemplate(*input)
	result, err := service.SaveTemplate(ctx, model)
	if err != nil {
		out.Status, _ = csmap.GetStatusFromError(err)
		return &out, err
	}

	out.Status, _ = csmap.GetStatusFromUpdateResult(result)
	out.Template = utils.ValToRef(csmap.ProjecttemplateProjecttemplateToIdl(*common.UpwrapFromUpdateResult(result)))

	return &out, nil
}

// DeleteProjectTemplate is the resolver for the deleteProjectTemplate field.
func (r *mutationResolver) DeleteProjectTemplate(ctx context.Context, id string) (*idl.Status, error) {
	service := factory.GetProjectTemplateService(ctx)

	err := service.DeleteProjecttemplate(ctx, id)
	return csmap.GetStatusFromError(err)
}

// SetProjectMilestonesFromTemplate is the resolver for the setProjectMilestonesFromTemplate field.
func (r *mutationResolver) SetProjectMilestonesFromTemplate(ctx context.Context, input *idl.UpdateProjectMilestoneTemplate) (*idl.CreateProjectResult, error) {
	defer csmap.ExpireProjectCache()

	service := factory.GetProjectService(ctx)
	templateService := factory.GetProjectTemplateService(ctx)

	//---get the selected template
	template, err := templateService.GetProjecttemplateByID(ctx, input.TemplateID)
	if err != nil {
		return nil, err
	}

	rs := factory.GetResourceService(ctx)
	org, _ := factory.GetDefaultOrganization(ctx)

	resourceMap, err := rs.GetResourceMap(ctx, false)
	if err != nil {
		return nil, err
	}

	roleMap, err := rs.GetRoleMap(ctx, false)
	if err != nil {
		return nil, err
	}

	//---update the project with the template structure
	result, err := service.SetProjectMilestonesFromTemplate(ctx, input.ProjectID, template.Data, resourceMap, roleMap, *org)
	if err != nil {
		return nil, err
	}

	//---map back the result
	status, err := csmap.GetStatusFromUpdateResult(result)
	out := idl.CreateProjectResult{
		Status:  status,
		Project: common.ValToRef(csmap.ProjectProjectToIdl(*common.UpwrapFromUpdateResult(result))),
	}

	return &out, nil
}

// SetNotificationsRead is the resolver for the setNotificationsRead field.
func (r *mutationResolver) SetNotificationsRead(ctx context.Context, input []string) (*idl.Status, error) {
	panic("needs refactor")

	// service := factory.GetNotificationService()

	// err := service.SetNotificationsRead(ctx, input)
	// if err != nil {
	// 	return csmap.GetStatusFromError(err)
	// }

	// return &idl.Status{Success: true}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
