package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"csserver/internal/appserv/augment"
	"csserver/internal/appserv/csmap"
	"csserver/internal/appserv/factory"
	"csserver/internal/appserv/graph"
	"csserver/internal/appserv/graph/idl"
	"csserver/internal/common"
	"fmt"

	log "github.com/sirupsen/logrus"
)

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*idl.User, error) {
	us := factory.GetUserService()
	obj, err := us.GetCurrentUser(ctx)
	if err != nil {
		return nil, err
	}

	out := csmap.UserUserToIdl(*obj)

	return &out, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*idl.User, error) {
	us := factory.GetUserService()
	obj, err := us.GetUser(ctx, id)
	if err != nil {
		return nil, err
	}

	out := csmap.UserUserToIdl(*obj)

	return &out, nil
}

// FindProjects is the resolver for the findProjects field.
func (r *queryResolver) FindProjects(ctx context.Context, pageAndFilter idl.PageAndFilter) (*idl.ProjectResults, error) {
	service := factory.GetProjectService()
	paging, filters := csmap.GetPageAndFilterModel(*pageAndFilter.Paging, pageAndFilter.Filters)

	results, err := service.FindProjects(ctx, paging, filters)
	if err != nil {
		return nil, err
	}

	pg, fi := csmap.GetPageAndFilterIdl(results.Pagination, results.Filters)
	log.Info(fi)
	out := idl.ProjectResults{
		Paging:  &pg,
		Filters: &fi,
		Results: csmap.ProjectProjectToIdlSlice(common.ValToRefSlice(results.Results)),
	}

	return &out, nil
}

// GetProject is the resolver for the getProject field.
func (r *queryResolver) GetProject(ctx context.Context, id string) (*idl.Project, error) {
	ps := factory.GetProjectService()
	obj, err := ps.GetProjectByID(ctx, id)
	if err != nil {
		return nil, err
	}

	out := csmap.ProjectProjectToIdl(*obj)

	return &out, nil
}

// PortfolioSnapshot is the resolver for the portfolioSnapshot field.
func (r *queryResolver) PortfolioSnapshot(ctx context.Context) (*idl.PortfolioSnapshot, error) {
	panic(fmt.Errorf("not implemented: PortfolioSnapshot - portfolioSnapshot"))
}

// ResourceSnapshot is the resolver for the resourceSnapshot field.
func (r *queryResolver) ResourceSnapshot(ctx context.Context) (*idl.ResourceSnapshot, error) {
	panic(fmt.Errorf("not implemented: ResourceSnapshot - resourceSnapshot"))
}

// FindProjectComments is the resolver for the findProjectComments field.
func (r *queryResolver) FindProjectComments(ctx context.Context, projectID string) ([]*idl.Comment, error) {
	panic(fmt.Errorf("not implemented: FindProjectComments - findProjectComments"))
}

// GetCommentThread is the resolver for the getCommentThread field.
func (r *queryResolver) GetCommentThread(ctx context.Context, id string) (*idl.Comment, error) {
	panic(fmt.Errorf("not implemented: GetCommentThread - getCommentThread"))
}

// FindActivity is the resolver for the findActivity field.
func (r *queryResolver) FindActivity(ctx context.Context, pageAndFilter idl.PageAndFilter) (*idl.ActivityResults, error) {
	as := factory.GetActivityService()

	//---TODO: make this find paged activities
	activityResults, err := as.FindAllActivitys(ctx)
	if err != nil {
		return nil, err
	}

	pg, fi := csmap.GetPageAndFilterIdl(activityResults.Pagination, activityResults.Filters)
	out := idl.ActivityResults{
		Paging:  &pg,
		Filters: &fi,
		Results: csmap.ActivityActivityToIdlSlice(common.ValToRefSlice(activityResults.Results)),
	}

	return &out, nil
}

// FindAllProjectTemplates is the resolver for the findAllProjectTemplates field.
func (r *queryResolver) FindAllProjectTemplates(ctx context.Context) (*idl.ProjecttemplateResults, error) {
	service := factory.GetProjectTemplateService()
	results, err := service.FindAllProjecttemplates(ctx)
	if err != nil {
		return nil, err
	}

	pg, fi := csmap.GetPageAndFilterIdl(results.Pagination, results.Filters)
	out := idl.ProjecttemplateResults{
		Paging:  &pg,
		Filters: &fi,
		Results: csmap.ProjecttemplateProjecttemplateToIdlSlice(common.ValToRefSlice(results.Results)),
	}

	return &out, nil
}

// GetOrganization is the resolver for the getOrganization field.
func (r *queryResolver) GetOrganization(ctx context.Context) (*idl.Organization, error) {
	panic(fmt.Errorf("not implemented: GetOrganization - getOrganization"))
}

// FindAllUsers is the resolver for the findAllUsers field.
func (r *queryResolver) FindAllUsers(ctx context.Context) (*idl.UserResults, error) {
	us := factory.GetUserService()
	userResults, err := us.FindAllUsers(ctx)
	if err != nil {
		return nil, err
	}

	pg, fi := csmap.GetPageAndFilterIdl(userResults.Pagination, userResults.Filters)
	out := idl.UserResults{
		Paging:  &pg,
		Filters: &fi,
		Results: csmap.UserUserToIdlSlice(common.ValToRefSlice(userResults.Results)),
	}

	return &out, nil
}

// FindAllResources is the resolver for the findAllResources field.
func (r *queryResolver) FindAllResources(ctx context.Context) (*idl.ResourceResults, error) {
	rs := factory.GetResourceService()
	results, err := rs.FindAllResources(ctx)
	if err != nil {
		return nil, err
	}

	pg, fi := csmap.GetPageAndFilterIdl(results.Pagination, results.Filters)
	out := idl.ResourceResults{
		Paging:  &pg,
		Filters: &fi,
		Results: csmap.ResourceResourceToIdlSlice(common.ValToRefSlice(results.Results)),
	}

	for _, r := range out.Results {
		augment.AugmentResource(r)
	}

	return &out, nil
}

// FindResources is the resolver for the findResources field.
func (r *queryResolver) FindResources(ctx context.Context, pageAndFilter *idl.PageAndFilter) (*idl.ResourceResults, error) {
	rs := factory.GetResourceService()
	paging, filters := csmap.GetPageAndFilterModel(*pageAndFilter.Paging, pageAndFilter.Filters)
	results, err := rs.FindResources(ctx, paging, filters)
	if err != nil {
		return nil, err
	}

	pg, fi := csmap.GetPageAndFilterIdl(results.Pagination, results.Filters)
	out := idl.ResourceResults{
		Paging:  &pg,
		Filters: &fi,
		Results: csmap.ResourceResourceToIdlSlice(common.ValToRefSlice(results.Results)),
	}

	return &out, nil
}

// FindUserNotifications is the resolver for the findUserNotifications field.
func (r *queryResolver) FindUserNotifications(ctx context.Context, pageAndFilter *idl.PageAndFilter) (*idl.NotificationResults, error) {
	panic(fmt.Errorf("not implemented: FindUserNotifications - findUserNotifications"))
}

// GetResource is the resolver for the getResource field.
func (r *queryResolver) GetResource(ctx context.Context, id string) (*idl.Resource, error) {
	service := factory.GetResourceService()
	obj, err := service.GetResourceByID(ctx, id)
	if err != nil {
		return nil, err
	}

	out := csmap.ResourceResourceToIdl(*obj)
	augment.AugmentResource(&out)

	return &out, nil
}

// FindAllLists is the resolver for the findAllLists field.
func (r *queryResolver) FindAllLists(ctx context.Context) (*idl.ListResults, error) {
	ls := factory.GetListService()
	listResults, err := ls.FindAllLists(ctx)
	if err != nil {
		return nil, err
	}

	pg, fi := csmap.GetPageAndFilterIdl(listResults.Pagination, listResults.Filters)
	out := idl.ListResults{
		Paging:  &pg,
		Filters: &fi,
		Results: csmap.ListListToIdlSlice(common.ValToRefSlice(listResults.Results)),
	}

	return &out, nil
}

// GetList is the resolver for the getList field.
func (r *queryResolver) GetList(ctx context.Context, nameOrID string) (*idl.List, error) {
	service := factory.GetListService()
	obj, err := service.GetList(ctx, nameOrID)
	if err != nil {
		return nil, err
	}

	out := csmap.ListListToIdl(*obj)

	return &out, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
