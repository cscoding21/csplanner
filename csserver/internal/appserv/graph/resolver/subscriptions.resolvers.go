package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"csserver/internal/appserv/factory"
	"csserver/internal/appserv/graph"
	"csserver/internal/appserv/graph/idl"
	"fmt"
	"time"

	nats "github.com/nats-io/nats.go"
	log "github.com/sirupsen/logrus"
)

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *idl.TimeResponse, error) {
	//https://gqlgen.com/recipes/subscriptions/
	// First you'll need to `make()` your channel. Use your type here!
	ch := make(chan *idl.TimeResponse)

	// You can (and probably should) handle your channels in a central place outside of `schema.resolvers.go`.
	// For this example we'll simply use a Goroutine with a simple loop.
	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		defer close(ch)

		for {
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			// Prepare your object.
			currentTime := time.Now()
			t := &idl.TimeResponse{
				UnixTime:  int(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}

			// The subscription may have got closed due to the client disconnecting.
			// Hence we do send in a select block with a check for context cancellation.
			// This avoids goroutine getting blocked forever or panicking,
			select {
			case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
				fmt.Println("Subscription Closed")
				// Handle deregistration of the channel here. `close(ch)`
				return // Remember to return to end the routine.

			case ch <- t: // This is the actual send.
				// Our message went through, do nothing
			}
		}
	}()

	// We return the channel and no error.
	return ch, nil
}

// NotificationUpdate is the resolver for the notificationUpdate field.
func (r *subscriptionResolver) NotificationUpdate(ctx context.Context) (<-chan string, error) {
	ch := make(chan string)

	client, err := factory.GetPubSubClient(ctx)
	if err != nil {
		return nil, err
	}

	subject := client.GetSubjectName("notification", "comment", "*")
	conn := client.GetPubSubConn()
	_, err = conn.Subscribe(subject, func(msg *nats.Msg) {
		log.Infof("Received message on subject %s: %s", subject, string(msg.Data))

		data := string(msg.Data)

		select {
		case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
			log.Info("Subscription Closed")
			// Handle deregistration of the channel here. `close(ch)`
			// close(ch)
			return // Remember to return to end the routine.

		case ch <- data: // This is the actual send.
			log.Infof("Message sent: %s", data)
			// Our message went through, do nothing
		}
	})
	if err != nil {
		log.Errorf("Subscribe Error: %s", err)
		return nil, err
	}

	return ch, nil
}

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
