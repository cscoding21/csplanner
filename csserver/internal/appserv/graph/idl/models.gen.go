// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package idl

import (
	"time"
)

type Activity struct {
	ID       string    `json:"id"`
	Type     string    `json:"type"`
	Summary  string    `json:"summary"`
	Detail   *string   `json:"detail,omitempty"`
	Context  string    `json:"context"`
	TargetID *string   `json:"targetID,omitempty"`
	Resource *Resource `json:"resource,omitempty"`
}

type ActivityResults struct {
	Paging  *Pagination `json:"paging"`
	Filters *Filters    `json:"filters"`
	Results []*Activity `json:"results,omitempty"`
}

type Artifact struct {
	ID       string `json:"id"`
	FileType string `json:"fileType"`
	FileName string `json:"fileName"`
	URL      string `json:"url"`
}

type CSWeek struct {
	Begin      time.Time `json:"begin"`
	End        time.Time `json:"end"`
	Year       int       `json:"year"`
	WeekNumber int       `json:"weekNumber"`
}

type Comment struct {
	ID           string     `json:"id"`
	ProjectID    string     `json:"projectId"`
	Text         string     `json:"text"`
	CreatedBy    string     `json:"createdBy"`
	CreatedAt    time.Time  `json:"createdAt"`
	UpdatedAt    time.Time  `json:"updatedAt"`
	User         *User      `json:"user"`
	Replies      []*Comment `json:"replies,omitempty"`
	Likes        []string   `json:"likes,omitempty"`
	Loves        []string   `json:"loves,omitempty"`
	Dislikes     []string   `json:"dislikes,omitempty"`
	LaughsAt     []string   `json:"laughsAt,omitempty"`
	Acknowledges []string   `json:"acknowledges,omitempty"`
	IsEdited     bool       `json:"isEdited"`
}

type CommentResults struct {
	Paging  *Pagination `json:"paging"`
	Filters *Filters    `json:"filters"`
	Results []*Comment  `json:"results,omitempty"`
}

type ControlFields struct {
	CreatedAt    time.Time  `json:"createdAt"`
	UpdatedAt    time.Time  `json:"updatedAt"`
	CreatedBy    string     `json:"createdBy"`
	CreateByUser *User      `json:"createByUser,omitempty"`
	UpdatedBy    string     `json:"updatedBy"`
	UpdateByUser *User      `json:"updateByUser,omitempty"`
	DeletedAt    *time.Time `json:"deletedAt,omitempty"`
	DeletedBy    *string    `json:"deletedBy,omitempty"`
	DeleteByUser *User      `json:"deleteByUser,omitempty"`
}

type CreateOrganizationResult struct {
	Status       *Status       `json:"status"`
	Organization *Organization `json:"organization,omitempty"`
}

type CreateProjectCommentResult struct {
	Status  *Status  `json:"status,omitempty"`
	Comment *Comment `json:"comment,omitempty"`
}

type CreateProjectResult struct {
	Status  *Status  `json:"status,omitempty"`
	Project *Project `json:"project,omitempty"`
}

type CreateResourceResult struct {
	Status   *Status   `json:"status"`
	Resource *Resource `json:"resource,omitempty"`
}

type CreateUserResult struct {
	Status *Status `json:"status,omitempty"`
	User   *User   `json:"user,omitempty"`
}

type Filter struct {
	Key        string  `json:"key"`
	Value      string  `json:"value"`
	Operation  string  `json:"operation"`
	CustomName *string `json:"customName,omitempty"`
}

type Filters struct {
	Filters []*Filter `json:"filters,omitempty"`
}

type InputFilter struct {
	Key        string  `json:"key"`
	Value      string  `json:"value"`
	Operation  string  `json:"operation"`
	CustomName *string `json:"customName,omitempty"`
}

type InputFilters struct {
	Filters []*InputFilter `json:"filters,omitempty"`
}

type InputPagination struct {
	ResultsPerPage *int `json:"resultsPerPage,omitempty"`
	PageNumber     *int `json:"pageNumber,omitempty"`
}

type List struct {
	ID     string      `json:"id"`
	Name   string      `json:"name"`
	Values []*ListItem `json:"values"`
}

type ListItem struct {
	Value     string `json:"value"`
	Name      string `json:"name"`
	SortOrder int    `json:"sortOrder"`
}

type ListResults struct {
	Paging  *Pagination `json:"paging,omitempty"`
	Filters *Filters    `json:"filters"`
	Results []*List     `json:"results,omitempty"`
}

type Mutation struct {
}

type Notification struct {
	ID                    string     `json:"id"`
	UserEmail             string     `json:"userEmail"`
	UserName              string     `json:"userName"`
	RecipientIsBot        bool       `json:"recipientIsBot"`
	Type                  int        `json:"type"`
	ContextID             string     `json:"contextId"`
	Text                  *string    `json:"text,omitempty"`
	IsRead                bool       `json:"isRead"`
	InitiatorName         string     `json:"initiatorName"`
	InitiatorEmail        string     `json:"initiatorEmail"`
	InitiatorProfileImage *string    `json:"initiatorProfileImage,omitempty"`
	CreatedAt             *time.Time `json:"createdAt,omitempty"`
	UpdatedAt             *time.Time `json:"updatedAt,omitempty"`
}

type NotificationResults struct {
	Paging  *Pagination     `json:"paging,omitempty"`
	Filters *Filters        `json:"filters"`
	Results []*Notification `json:"results"`
}

type Organization struct {
	ID       *string               `json:"id,omitempty"`
	Name     string                `json:"name"`
	Defaults *OrganizationDefaults `json:"defaults"`
}

type OrganizationDefaults struct {
	DiscountRate float64 `json:"discountRate"`
	HoursPerWeek int     `json:"hoursPerWeek"`
	FocusFactor  float64 `json:"focusFactor"`
}

type PageAndFilter struct {
	Paging  *InputPagination `json:"paging,omitempty"`
	Filters *InputFilters    `json:"filters,omitempty"`
}

type Pagination struct {
	TotalResults   *int    `json:"totalResults,omitempty"`
	ResultsPerPage *int    `json:"resultsPerPage,omitempty"`
	PageNumber     *int    `json:"pageNumber,omitempty"`
	After          *string `json:"after,omitempty"`
}

type Portfolio struct {
	Begin       *time.Time              `json:"begin,omitempty"`
	End         *time.Time              `json:"end,omitempty"`
	WeekSummary []*PortfolioWeekSummary `json:"weekSummary"`
	Schedule    []*Schedule             `json:"schedule"`
}

type PortfolioWeekSummary struct {
	WeekNumber     int       `json:"weekNumber"`
	Year           int       `json:"year"`
	Begin          time.Time `json:"begin"`
	End            time.Time `json:"end"`
	OrgCapacity    int       `json:"orgCapacity"`
	AllocatedHours int       `json:"allocatedHours"`
}

type Project struct {
	ID                 *string             `json:"id,omitempty"`
	CreatedAt          *time.Time          `json:"createdAt,omitempty"`
	UpdatedAt          *time.Time          `json:"updatedAt,omitempty"`
	CreatedBy          *string             `json:"createdBy,omitempty"`
	UpdatedBy          *string             `json:"updatedBy,omitempty"`
	ProjectBasics      *ProjectBasics      `json:"projectBasics"`
	ProjectStatusBlock *ProjectStatusBlock `json:"projectStatusBlock"`
	ProjectValue       *ProjectValue       `json:"projectValue"`
	ProjectCost        *ProjectCost        `json:"projectCost"`
	ProjectDaci        *ProjectDaci        `json:"projectDaci"`
	ProjectFeatures    []*ProjectFeature   `json:"projectFeatures,omitempty"`
	ProjectMilestones  []*ProjectMilestone `json:"projectMilestones,omitempty"`
}

type ProjectActivity struct {
	ProjectID     string    `json:"projectID"`
	Project       *Project  `json:"project,omitempty"`
	MilestoneID   string    `json:"milestoneID"`
	MilestoneName string    `json:"milestoneName"`
	TaskID        string    `json:"taskID"`
	TaskName      string    `json:"taskName"`
	ResourceID    string    `json:"resourceID"`
	Resource      *Resource `json:"resource,omitempty"`
	HoursSpent    *int      `json:"hoursSpent,omitempty"`
}

type ProjectActivityWeek struct {
	WeekNumber  int                `json:"weekNumber"`
	Year        int                `json:"year"`
	Begin       time.Time          `json:"begin"`
	End         time.Time          `json:"end"`
	OrgCapacity int                `json:"orgCapacity"`
	Activities  []*ProjectActivity `json:"activities,omitempty"`
}

type ProjectBasics struct {
	Name        string     `json:"name"`
	Description string     `json:"description"`
	StartDate   *time.Time `json:"startDate,omitempty"`
	OwnerID     *string    `json:"ownerID,omitempty"`
	Owner       *User      `json:"owner,omitempty"`
}

type ProjectCost struct {
	Ongoing     *float64                   `json:"ongoing,omitempty"`
	BlendedRate *float64                   `json:"blendedRate,omitempty"`
	Calculated  *ProjectCostCalculatedData `json:"calculated,omitempty"`
}

type ProjectCostCalculatedData struct {
	InitialCost     *float64 `json:"initialCost,omitempty"`
	HourEstimate    int      `json:"hourEstimate"`
	HoursActualized int      `json:"hoursActualized"`
}

type ProjectDaci struct {
	Driver      []*Resource `json:"driver,omitempty"`
	Approver    []*Resource `json:"approver,omitempty"`
	Contributor []*Resource `json:"contributor,omitempty"`
	Informed    []*Resource `json:"informed,omitempty"`
}

type ProjectFeature struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Priority    string `json:"priority"`
	Status      string `json:"status"`
}

type ProjectFilters struct {
	Status *string `json:"status,omitempty"`
}

type ProjectMilestone struct {
	ID         string                          `json:"id"`
	Phase      *ProjectMilestonePhase          `json:"phase"`
	Tasks      []*ProjectMilestoneTask         `json:"tasks"`
	Calculated *ProjectMilestoneCalculatedData `json:"calculated,omitempty"`
}

type ProjectMilestoneCalculatedData struct {
	EstimatedStartDate *time.Time `json:"estimatedStartDate,omitempty"`
	EstimatedEndDate   *time.Time `json:"estimatedEndDate,omitempty"`
	TotalHours         *int       `json:"totalHours,omitempty"`
	HoursRemaining     *int       `json:"hoursRemaining,omitempty"`
	IsComplete         *bool      `json:"isComplete,omitempty"`
	IsInFlight         *bool      `json:"isInFlight,omitempty"`
	TotalTasks         *int       `json:"totalTasks,omitempty"`
	CompletedTasks     *int       `json:"completedTasks,omitempty"`
	RemovedHours       *int       `json:"removedHours,omitempty"`
}

type ProjectMilestonePhase struct {
	ID          string `json:"id"`
	Order       int    `json:"order"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type ProjectMilestoneTask struct {
	ID              string                     `json:"id"`
	Name            string                     `json:"name"`
	HourEstimate    int                        `json:"hourEstimate"`
	Description     *string                    `json:"description,omitempty"`
	RequiredSkillID string                     `json:"requiredSkillID"`
	Skills          []*Skill                   `json:"skills,omitempty"`
	Resources       []*Resource                `json:"resources,omitempty"`
	ResourceIDs     []string                   `json:"resourceIDs,omitempty"`
	Status          string                     `json:"status"`
	Calculated      *ProjectTaskCalculatedData `json:"calculated,omitempty"`
}

type ProjectResults struct {
	Paging  *Pagination `json:"paging,omitempty"`
	Filters *Filters    `json:"filters"`
	Results []*Project  `json:"results,omitempty"`
}

type ProjectScheduleResult struct {
	Schedule *Schedule `json:"schedule"`
}

type ProjectStatusBlock struct {
	Status            string                     `json:"status"`
	AllowedNextStates []*ProjectStatusTransition `json:"allowedNextStates,omitempty"`
}

type ProjectStatusTransition struct {
	NextState   string            `json:"nextState"`
	CanEnter    bool              `json:"canEnter"`
	CheckResult *ValidationResult `json:"checkResult"`
}

type ProjectTaskCalculatedData struct {
	ActualizedHoursToComplete *int     `json:"actualizedHoursToComplete,omitempty"`
	ActualizedCost            *float64 `json:"actualizedCost,omitempty"`
	ResourceContention        *float64 `json:"resourceContention,omitempty"`
}

type ProjectValue struct {
	DiscountRate      *float64                    `json:"discountRate,omitempty"`
	IsCapitalized     bool                        `json:"isCapitalized"`
	ProjectValueLines []*ProjectValueLine         `json:"projectValueLines,omitempty"`
	Calculated        *ProjectValueCalculatedData `json:"calculated,omitempty"`
}

type ProjectValueCalculatedData struct {
	NetPresentValue      *float64 `json:"netPresentValue,omitempty"`
	InternalRateOfReturn *float64 `json:"internalRateOfReturn,omitempty"`
	YearOneValue         *float64 `json:"yearOneValue,omitempty"`
	YearTwoValue         *float64 `json:"yearTwoValue,omitempty"`
	YearThreeValue       *float64 `json:"yearThreeValue,omitempty"`
	YearFourValue        *float64 `json:"yearFourValue,omitempty"`
	YearFiveValue        *float64 `json:"yearFiveValue,omitempty"`
}

type ProjectValueLine struct {
	ID             string   `json:"id"`
	FundingSource  string   `json:"fundingSource"`
	ValueCategory  string   `json:"valueCategory"`
	YearOneValue   *float64 `json:"yearOneValue,omitempty"`
	YearTwoValue   *float64 `json:"yearTwoValue,omitempty"`
	YearThreeValue *float64 `json:"yearThreeValue,omitempty"`
	YearFourValue  *float64 `json:"yearFourValue,omitempty"`
	YearFiveValue  *float64 `json:"yearFiveValue,omitempty"`
}

type Projecttemplate struct {
	ID     string                  `json:"id"`
	Name   string                  `json:"name"`
	Phases []*ProjecttemplatePhase `json:"phases"`
}

type ProjecttemplatePhase struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Order       int    `json:"order"`
	Description string `json:"description"`
}

type ProjecttemplateResults struct {
	Paging  *Pagination        `json:"paging,omitempty"`
	Filters *Filters           `json:"filters"`
	Results []*Projecttemplate `json:"results,omitempty"`
}

type Query struct {
}

type RelateArtifact struct {
	ArtifactID string `json:"artifactID"`
	LinkID     string `json:"linkID"`
}

type Resource struct {
	ID                    *string    `json:"id,omitempty"`
	Type                  string     `json:"type"`
	Status                string     `json:"status"`
	Name                  string     `json:"name"`
	RoleID                *string    `json:"roleID,omitempty"`
	Role                  *Role      `json:"role,omitempty"`
	UserEmail             *string    `json:"userEmail,omitempty"`
	User                  *User      `json:"user,omitempty"`
	ProfileImage          *string    `json:"profileImage,omitempty"`
	InitialCost           *float64   `json:"initialCost,omitempty"`
	AnnualizedCost        *float64   `json:"annualizedCost,omitempty"`
	Skills                []*Skill   `json:"skills,omitempty"`
	CreatedAt             *time.Time `json:"createdAt,omitempty"`
	AvailableHoursPerWeek *int       `json:"availableHoursPerWeek,omitempty"`
}

type ResourceAllocationGrid struct {
	WeekActivities []*ProjectActivity `json:"weekActivities,omitempty"`
}

type ResourceResults struct {
	Paging  *Pagination `json:"paging,omitempty"`
	Filters *Filters    `json:"filters"`
	Results []*Resource `json:"results,omitempty"`
}

type Role struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	HourlyRate  *float64 `json:"hourlyRate,omitempty"`
}

type RoleResults struct {
	Paging  *Pagination `json:"paging,omitempty"`
	Filters *Filters    `json:"filters"`
	Results []*Role     `json:"results,omitempty"`
}

type Schedule struct {
	ProjectName          string                 `json:"projectName"`
	ProjectID            string                 `json:"projectID"`
	Project              *Project               `json:"project"`
	Begin                *time.Time             `json:"begin,omitempty"`
	End                  *time.Time             `json:"end,omitempty"`
	ProjectActivityWeeks []*ProjectActivityWeek `json:"projectActivityWeeks,omitempty"`
	Exceptions           []*ScheduleException   `json:"exceptions,omitempty"`
}

type ScheduleException struct {
	Level   int    `json:"level"`
	Type    string `json:"type"`
	Scope   string `json:"scope"`
	Message string `json:"message"`
}

type Skill struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Proficiency *float64 `json:"proficiency,omitempty"`
}

type Status struct {
	Success          bool              `json:"success"`
	Message          []string          `json:"message"`
	ValidationResult *ValidationResult `json:"validationResult,omitempty"`
}

// `Subscription` is where all the subscriptions your clients can
// request. You can use Schema Directives like normal to restrict
// access.
type Subscription struct {
}

type TimeResponse struct {
	UnixTime  int    `json:"unixTime"`
	TimeStamp string `json:"timeStamp"`
}

type UpdateComment struct {
	ProjectID string  `json:"projectId"`
	ID        *string `json:"id,omitempty"`
	Text      string  `json:"text"`
}

type UpdateCommentEmote struct {
	CommentID string `json:"commentID"`
	EmoteType string `json:"emoteType"`
}

type UpdateCommentReply struct {
	ParentCommentID string `json:"parentCommentID"`
	Text            string `json:"text"`
}

type UpdateOrganization struct {
	ID       *string                     `json:"id,omitempty"`
	Name     string                      `json:"name"`
	Defaults *UpdateOrganizationDefaults `json:"defaults"`
}

type UpdateOrganizationDefaults struct {
	DiscountRate float64 `json:"discountRate"`
	HoursPerWeek int     `json:"hoursPerWeek"`
	FocusFactor  float64 `json:"focusFactor"`
}

type UpdateProject struct {
	ID                *string                   `json:"id,omitempty"`
	ProjectBasics     *UpdateProjectBasics      `json:"projectBasics,omitempty"`
	ProjectValue      *UpdateProjectValue       `json:"projectValue,omitempty"`
	ProjectCost       *UpdateProjectCost        `json:"projectCost,omitempty"`
	ProjectDaci       *UpdateProjectDaci        `json:"projectDaci,omitempty"`
	ProjectFeatures   []*UpdateProjectFeature   `json:"projectFeatures,omitempty"`
	ProjectMilestones []*UpdateProjectMilestone `json:"projectMilestones,omitempty"`
}

type UpdateProjectBasics struct {
	Name        string     `json:"name"`
	Description *string    `json:"description,omitempty"`
	StartDate   *time.Time `json:"startDate,omitempty"`
	OwnerID     *string    `json:"ownerID,omitempty"`
}

type UpdateProjectCost struct {
	Ongoing     *float64 `json:"ongoing,omitempty"`
	BlendedRate *float64 `json:"blendedRate,omitempty"`
}

type UpdateProjectDaci struct {
	DriverIDs      []*string `json:"driverIDs,omitempty"`
	ApproverIDs    []*string `json:"approverIDs,omitempty"`
	ContributorIDs []*string `json:"contributorIDs,omitempty"`
	InformedIDs    []*string `json:"informedIDs,omitempty"`
}

type UpdateProjectFeature struct {
	ProjectID   string  `json:"projectID"`
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Status      string  `json:"status"`
	Priority    string  `json:"priority"`
}

type UpdateProjectMilestone struct {
	ID    string                        `json:"id"`
	Phase *UpdateProjectMilestonePhase  `json:"phase"`
	Tasks []*UpdateProjectMilestoneTask `json:"tasks,omitempty"`
}

type UpdateProjectMilestonePhase struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Order       int    `json:"order"`
	Description string `json:"description"`
}

type UpdateProjectMilestoneTask struct {
	ID              *string  `json:"id,omitempty"`
	Name            string   `json:"name"`
	Description     *string  `json:"description,omitempty"`
	HourEstimate    int      `json:"hourEstimate"`
	ResourceIDs     []string `json:"resourceIDs,omitempty"`
	RequiredSkillID string   `json:"requiredSkillID"`
	Status          string   `json:"status"`
	ProjectID       string   `json:"projectID"`
	MilestoneID     string   `json:"milestoneID"`
}

type UpdateProjectMilestoneTemplate struct {
	ProjectID  string `json:"projectId"`
	TemplateID string `json:"templateId"`
}

type UpdateProjectValue struct {
	DiscountRate  float64 `json:"discountRate"`
	IsCapitalized bool    `json:"isCapitalized"`
}

type UpdateProjectValueLine struct {
	ProjectID      string   `json:"projectID"`
	ID             *string  `json:"id,omitempty"`
	FundingSource  string   `json:"fundingSource"`
	ValueCategory  string   `json:"valueCategory"`
	YearOneValue   *float64 `json:"yearOneValue,omitempty"`
	YearTwoValue   *float64 `json:"yearTwoValue,omitempty"`
	YearThreeValue *float64 `json:"yearThreeValue,omitempty"`
	YearFourValue  *float64 `json:"yearFourValue,omitempty"`
	YearFiveValue  *float64 `json:"yearFiveValue,omitempty"`
}

type UpdateResource struct {
	ID                    *string        `json:"id,omitempty"`
	Type                  string         `json:"type"`
	Status                string         `json:"status"`
	Name                  string         `json:"name"`
	RoleID                *string        `json:"roleID,omitempty"`
	UserID                *string        `json:"userID,omitempty"`
	Email                 *string        `json:"email,omitempty"`
	InitialCost           *float64       `json:"initialCost,omitempty"`
	AnnualizedCost        *float64       `json:"annualizedCost,omitempty"`
	ProfileImage          *string        `json:"profileImage,omitempty"`
	AvailableHoursPerWeek *int           `json:"availableHoursPerWeek,omitempty"`
	Skills                []*UpdateSkill `json:"skills,omitempty"`
}

type UpdateRole struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	HourlyRate  *float64 `json:"hourlyRate,omitempty"`
}

type UpdateSkill struct {
	ResourceID  string  `json:"resourceID"`
	ID          string  `json:"id"`
	Proficiency float64 `json:"proficiency"`
}

type UpdateUser struct {
	Name            string  `json:"name"`
	Email           string  `json:"email"`
	Password        string  `json:"password"`
	ConfirmPassword string  `json:"confirmPassword"`
	ProfileImage    *string `json:"profileImage,omitempty"`
}

type User struct {
	ID           string  `json:"id"`
	FirstName    string  `json:"firstName"`
	LastName     string  `json:"lastName"`
	Email        string  `json:"email"`
	ProfileImage *string `json:"profileImage,omitempty"`
}

type UserResults struct {
	Paging  *Pagination `json:"paging,omitempty"`
	Filters *Filters    `json:"filters"`
	Results []*User     `json:"results,omitempty"`
}

type ValidationMessage struct {
	Message string `json:"message"`
	Field   string `json:"field"`
}

type ValidationResult struct {
	Pass     bool                 `json:"pass"`
	Messages []*ValidationMessage `json:"messages,omitempty"`
}
