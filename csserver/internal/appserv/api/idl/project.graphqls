# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Project {
  id: String
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  projectBasics: ProjectBasics!
  projectValue: ProjectValue!
  projectCost: ProjectCost!
  projectDaci: ProjectDaci!
  projectFeatures: [ProjectFeature!]
  projectMilestones: [ProjectMilestone!]
}


type ProjectBasics {
  name: String!
  description: String!
  status: String!
  startDate: Time
  ownerID: String
  owner: User
}


type ProjectValue {
  fundingSource: String
  discountRate: Float
  yearOneValue: Float
  yearTwoValue: Float
  yearThreeValue: Float
  yearFourValue: Float
  yearFiveValue: Float
  calculated: ProjectValueCalculatedData
}


type ProjectCost {
  ongoing: Float
  blendedRate: Float
  calculated: ProjectCostCalculatedData
}


type ProjectDaci {
  driver: [Resource]
  approver: [Resource]
  contributor: [Resource]
  informed: [Resource]
}

type ProjectFeature {
  id: String!
  name: String!
  description: String!
  priority: String!
  status: String!
}

type ProjectMilestone {
  id: String!
  phase: ProjectMilestonePhase!
  tasks: [ProjectMilestoneTask!]!

  calculated: ProjectMilestoneCalculatedData
}

type ProjectMilestonePhase {
  id: String!
  order: Int!
  name: String!
  description: String!
}

type ProjectMilestoneTask {
  id: String!
  name: String!
  hourEstimate: Int!
  description: String
  requiredSkillID: String!
  skills: [Skill!]
  resources: [Resource!]
  resourceIDs: [String!]
  status: String!
  calculated: ProjectTaskCalculatedData
}


type ProjectFilters {
  status: String
}


type ProjectResults {
  paging: Pagination
  filters: Filters!
  results: [Project!]
}


type CreateProjectResult {
  status: Status
  project: Project
}


type CreateProjectCommentResult {
  status: Status
  comment: Comment
}



type ProjectCostCalculatedData {
  initialCost: Float
  hourEstimate: Int!
}

type ProjectValueCalculatedData {
  netPresentValue: Float
  internalRateOfReturn: Float
}

type ProjectMilestoneCalculatedData {
  estimatedStartDate: Time
  estimatedEndDate: Time

  totalHours: Int
	hoursRemaining: Int
	isComplete: Boolean
	isInFlight: Boolean
	totalTasks: Int
	completedTasks: Int
	removedHours: Int
}

type ProjectTaskCalculatedData {
  actualizedHoursToComplete: Int
	actualizedCost: Float
	resourceContention:  Float
}




#----------------------



input UpdateProject {
  id: String
  projectBasics: UpdateProjectBasics
  projectValue: UpdateProjectValue
  projectCost: UpdateProjectCost
  projectDaci: UpdateProjectDACI
  projectFeatures: [UpdateProjectFeature]
  projectMilestones: [UpdateProjectMilestone]
}


input UpdateProjectBasics {
  name: String!
  description: String
  status: String
  startDate: Time
  ownerID: String
}


input UpdateProjectValue {
  fundingSource: String
  discountRate: Float
  yearOneValue: Float
  yearTwoValue: Float
  yearThreeValue: Float
  yearFourValue: Float
  yearFiveValue: Float
}


input UpdateProjectCost {
  ongoing: Float
  blendedRate: Float
}


input UpdateProjectDACI {
  driverIDs: [String]
  approverIDs: [String]
  contributorIDs: [String]
  informedIDs: [String]
}

input UpdateProjectFeature {
  projectID: String!
  id: String
  name: String!
  description: String!
  status: String!
  priority: String!
}


input UpdateProjectMilestone {
  id: String!
  phase: UpdateProjectMilestonePhase!
  tasks: [UpdateProjectMilestoneTask!]
}


input UpdateProjectMilestonePhase {
  id: String!
  name: String!
  order: Int!
  description: String!
}


input UpdateProjectMilestoneTask {
  id: String
  name: String!
  description: String
  hourEstimate: Int!
  resourceIDs: [String!]
  requiredSkillID: String!
  status: String!
  projectID: String!
  milestoneID: String!
}