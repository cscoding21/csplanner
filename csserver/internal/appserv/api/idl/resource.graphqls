type Resource {
  id: String
  type: String!
  status: String!
  name: String!
  roleID: String
  role: Role
  userEmail: String
  user: User
  profileImage: String
  initialCost: Float
  annualizedCost: Float
  skills: [Skill!]
  availableHoursPerWeek: Int
  calculated: ResourceCalculatedData!
}

type ResourceCalculatedData {
  hourlyCost: Float
	hourlyCostMethod: String!
}


type Skill {
  id: String!
  name: String!
  proficiency: Float
}

type Role {
  id: String!
  name: String!
  description: String!
  hourlyRate: Float
  defaultSkills: [Skill!]
}


input UpdateResource {
  id: String
  type: String!
  status: String!
  name: String!
  roleID: String
  userID: String
  email: String
  initialCost: Float
  annualizedCost: Float
  profileImage: String
  availableHoursPerWeek: Int
  skills: [UpdateSkill!]
}

input UpdateSkill {
  resourceID: String!
  id: String!
  proficiency: Float!
}

input UpdateRole {
  id: String
  name: String!
  description: String!
  hourlyRate: Float
  defaultSkills: [UpdateSkill!]
}


type CreateResourceResult {
  status: Status!
  resource: Resource
}

type CreateRoleResult {
  status: Status!
  role: Role
}

type ResourceResults {
  paging: Pagination
  filters: Filters!
  results: [ResourceEnvelope!]
}

type RoleResults {
  paging: Pagination
  filters: Filters!
  results: [RoleEnvelope!]
}

type ResourceEnvelope {
  meta: BaseModel!
  data: Resource!
}

type RoleEnvelope {
  meta: BaseModel!
  data: Role!
}